server:
  port: 5000
spring:
  profiles:
    active: after_route

---
spring:
  application:
    name: gateway
  config:
    activate:
      on-profile: after_route
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
    gateway:
      discovery:
        locator:
          enabled: false
          lowerCaseServiceId: true
      routes:
        # 生产者路由
        - id: provider
          uri: lb://provider
          predicates:
            - Path=/provider/**
          filters:
            - StripPrefix=1

        # 消费者路由（常用方法）
          # id仅用于标识，匹配路由由predicates控制
        - id: consumer
          # 设置服务地址：lb://表示本机服务
          uri: lb://consumer
          predicates:
            # 匹配路径
            - Path=/consumer/**
            # 断言时间
#            - After=2021-08-18T12:36:00.789-07:00[America/Denver]
            # 断言header [包含数字]
#            - Header=X-Request-Id, \d+
            # 校验cookie的名字和值
#            - Cookie=name, fox
            # 校验Host
#            - Host=**.foxcat.top
            # 校验请求方式
#            - Method=GET
            # 校验请求参数
            - Query=id
            # 校验请求参数名参数值
#            - Query=id, 2021
          filters:
            # 去除Path前缀，例：'/consumer'
            - StripPrefix=1

        # 修改返回消息
        - id: rewritepath
          uri: https://blog.csdn.net
          predicates:
            - Path=/rewritepath/**
          filters:
            - RewritePath=/rewritepath/(?<segment>.*), /$\{segment}

        # 测试限流
        - id: limit
          uri: https://blog.csdn.net
          predicates:
            - Path=/limit/**
          filters:
            - name: RequestRateLimiter
              args:
                key-resolver: '#{@hostAddressKeyResolver}'
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 3

        # 测试短路由id
        - id: short
          uri: lb://consumer
          predicates:
            - Path=/short/**
          filters:
            - StripPrefix=1


    # Sentinel 限流
    sentinel:
      transport:
        port: 15000
        dashboard: localhost:8748

  # 配置redis
  redis:
    host: localhost
    port: 6379
    database: 0